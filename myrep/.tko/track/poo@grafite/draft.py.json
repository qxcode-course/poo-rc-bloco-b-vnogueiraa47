{
    "patches": [
        {
            "label": "2025-10-28_12-22-58",
            "content": "@@ -20,16 +20,14 @@\n def \n-_\n _init_\n-_\n (sel\n@@ -2137,15 +2137,13 @@\n def \n-_\n _str_\n-_\n (sel\n",
            "lines": "97"
        },
        {
            "label": "2025-10-28_12-23-30",
            "content": "@@ -826,39 +826,37 @@\n eturn 6%0A    def \n-_\n _str_\n-_\n (self):%0A        \n@@ -953,32 +953,30 @@\n a:%0A     def \n-_\n _init_\n-_\n (self, thick\n@@ -1925,10 +1925,8 @@\n sto%0A\n-''\n %0A   \n",
            "lines": "97"
        },
        {
            "label": "2025-10-28_12-37-24",
            "content": "@@ -1925,16 +1925,18 @@\n - gasto%0A\n+''\n %0A       \n",
            "lines": "97"
        },
        {
            "label": "2025-10-28_12-37-57",
            "content": "class Grafite:\n    def __init__(self, thickness: float, hardness: str, size: int):\n        self.__thickness = thickness\n        self.__hardness = hardness\n        self.__size = size\n    def get_thickness(self):\n        return self.__thickness\n    def get_hardness(self):\n        return self.__hardness\n    def get_size(self):\n        return self.__size\n    def set_thickness(self, calibre: float):\n        self.__thickness = calibre\n    def set_hardness(self, dureza: str):\n        self.__hardness = dureza \n    def set_size(self, tamanho: int):\n        self.__size = tamanho\n    def usagePerSheet(self):\n        if self.__hardness == \"HB\":\n            return 1\n        if self.__hardness == \"2B\":\n            return 2\n        if self.__hardness == \"4B\":\n            return 4\n        if self.__hardness == \"6B\":\n            return 6\n    def __str__(self):\n        return f\"[{self.get_thickness()}:{self.get_hardness()}:{self.get_size()}]\"\n\nclass Lapiseira:\n     def __init__(self, thickness: float = 0.0):\n        self.tip: Grafite | None = None\n        self.thickness = thickness\n     def inserir(self, tip: Grafite) -> bool:\n        if self.tip !=  None:\n            print (\"fail: ja existe grafite\")\n            return False\n        if self.thickness != tip.get_thickness():\n            print (\"fail: calibre incompativel\")\n            return False \n        self.tip = tip\n        return True\n\n     def remover(self) -> Grafite | None: \n        if self.tip == None:\n            print (\"fail: nao existe grafite\")\n            return None\n        aux: Grafite = self.tip\n        self.tip = None\n        return aux\n     def escrever(self):\n        if self.tip == None:\n            print(\"fail: nao existe grafite\")\n            return\n        if self.tip.get_size() <= 10:\n            print(\"fail: tamanho insuficiente\")\n            return\n\n        gasto = self.tip.usagePerSheet()\n        novo_tamanho = self.tip.get_size() - gasto\n\n        if self.tip.get_size() - self.tip.usagePerSheet() < 10:\n            print (\"fail: folha incompleta\")\n            self.tip.set_size(10)\n            return\n\n        self.tip.set_size(novo_tamanho)\n\n     def __str__(self):\n        return f\"calibre: {self.thickness}, grafite: {self.tip if self.tip != None else \"null\"}\"\n\ndef main ():\n     lapiseira = Lapiseira()\n\n     while True:\n        line = input()\n        print(\"$\"+line)\n        args:list[str] = line.split(\" \")\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"show\":\n            print(lapiseira)\n        elif args[0] == \"init\":\n            lapiseira = Lapiseira(float(args[1]))\n        elif args[0] == \"insert\":\n            thickness = float(args[1])\n            hardness = str(args[2])\n            size = int(args[3])\n            grafite = Grafite(thickness,hardness,size)\n            lapiseira.inserir(grafite) \n        elif args[0] == \"remove\":\n            grafite = lapiseira.remover()\n        elif args[0] == \"write\":\n            lapiseira.escrever()\n    \nmain()",
            "lines": "97"
        }
    ]
}